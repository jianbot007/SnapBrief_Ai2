package Snapbrief_AI.demo.Componenets;

import com.rometools.rome.feed.synd.SyndEntry;
import com.rometools.rome.feed.synd.SyndFeed;
import com.rometools.rome.io.SyndFeedInput;
import com.rometools.rome.io.XmlReader;
import Snapbrief_AI.demo.Entity.Article;

import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.security.SecureRandom;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

public class RssReader {

    public static List<Article> fetchArticles(String feedUrl) {
        List<Article> articles = new ArrayList<>();
        try {
            // ======= SSL Context =======
            // Trust all certificates (for dev/testing only)
            SSLContext sslContext = SSLContext.getInstance("TLS");
            sslContext.init(null, new TrustManager[]{
                    new X509TrustManager() {
                        public java.security.cert.X509Certificate[] getAcceptedIssuers() { return null; }
                        public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) {}
                        public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) {}
                    }
            }, new SecureRandom());

            // ======= HttpClient with TLS 1.2+ =======
            HttpClient client = HttpClient.newBuilder()
                    .sslContext(sslContext)
                    .version(HttpClient.Version.HTTP_2)
                    .build();

            // ======= HttpRequest with proper User-Agent =======
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(feedUrl))
                    .header("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                            + "AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36")
                    .GET()
                    .build();

            // ======= Send request =======
            HttpResponse<InputStream> response = client.send(request, HttpResponse.BodyHandlers.ofInputStream());

            // ======= Parse RSS feed =======
            SyndFeed feed = new SyndFeedInput().build(new XmlReader(response.body()));

            for (SyndEntry entry : feed.getEntries()) {
                Article article = new Article();
                article.setTitle(entry.getTitle());
                article.setContent(entry.getDescription() != null ? entry.getDescription().getValue() : "");
                article.setSourceUrl(entry.getLink());
                article.setPublishedAt(entry.getPublishedDate() != null ?
                        new Timestamp(entry.getPublishedDate().getTime()).toLocalDateTime() : null);

                // Save raw JSON as string (PostgreSQL jsonb)
                String rawJson = "{ \"title\": \"" + escapeJson(entry.getTitle()) + "\", " +
                        "\"link\": \"" + escapeJson(entry.getLink()) + "\" }";
                article.setRawJson(rawJson);

                articles.add(article);
            }

        } catch (Exception e) {
            System.err.println("Error fetching RSS feed: " + feedUrl);
            e.printStackTrace();
        }
        return articles;
    }

    // ======= Escape JSON special characters =======
    private static String escapeJson(String text) {
        if (text == null) return "";
        return text.replace("\"", "\\\"")
                .replace("\n", "\\n")
                .replace("\r", "");
    }
}
